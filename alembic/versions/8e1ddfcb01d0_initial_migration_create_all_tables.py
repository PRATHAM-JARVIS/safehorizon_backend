"""Initial migration - create all tables

Revision ID: 8e1ddfcb01d0
Revises: 
Create Date: 2025-09-28 22:45:13.283556

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision = '8e1ddfcb01d0'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authorities',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('badge_number', sa.String(), nullable=False),
    sa.Column('department', sa.String(), nullable=False),
    sa.Column('rank', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('badge_number'),
    sa.UniqueConstraint('email')
    )
    op.create_table('tourists',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('emergency_contact', sa.String(), nullable=True),
    sa.Column('emergency_phone', sa.String(), nullable=True),
    sa.Column('safety_score', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('last_location_lat', sa.Float(), nullable=True),
    sa.Column('last_location_lon', sa.Float(), nullable=True),
    sa.Column('last_seen', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('restricted_zones',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('zone_type', sa.Enum('SAFE', 'RISKY', 'RESTRICTED', name='zonetype'), nullable=False),
    # PostGIS not available - using latitude/longitude instead
    sa.Column('center_latitude', sa.Float(), nullable=False),
    sa.Column('center_longitude', sa.Float(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['authorities.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # Create regular indexes instead of GIST
    op.create_index('idx_restricted_zones_center', 'restricted_zones', ['center_latitude', 'center_longitude'], unique=False)
    op.create_table('trips',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('tourist_id', sa.String(), nullable=False),
    sa.Column('destination', sa.String(), nullable=False),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.Enum('PLANNED', 'ACTIVE', 'COMPLETED', 'CANCELLED', name='tripstatus'), nullable=True),
    sa.Column('itinerary', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['tourist_id'], ['tourists.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('locations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('tourist_id', sa.String(), nullable=False),
    sa.Column('trip_id', sa.Integer(), nullable=True),
    # PostGIS not available - using latitude/longitude instead
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('altitude', sa.Float(), nullable=True),
    sa.Column('speed', sa.Float(), nullable=True),
    sa.Column('accuracy', sa.Float(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['tourist_id'], ['tourists.id'], ),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # Create regular indexes instead of GIST
    op.create_index('idx_locations_coords', 'locations', ['latitude', 'longitude'], unique=False)
    op.create_table('alerts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('tourist_id', sa.String(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.Column('type', sa.Enum('GEOFENCE', 'ANOMALY', 'PANIC', 'SOS', 'SEQUENCE', name='alerttype'), nullable=False),
    sa.Column('severity', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='alertseverity'), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('alert_metadata', sa.Text(), nullable=True),
    sa.Column('is_acknowledged', sa.Boolean(), nullable=True),
    sa.Column('acknowledged_by', sa.String(), nullable=True),
    sa.Column('acknowledged_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_resolved', sa.Boolean(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['acknowledged_by'], ['authorities.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['tourist_id'], ['tourists.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('incidents',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('alert_id', sa.Integer(), nullable=False),
    sa.Column('incident_number', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('priority', sa.String(), nullable=True),
    sa.Column('assigned_to', sa.String(), nullable=True),
    sa.Column('response_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('resolution_notes', sa.Text(), nullable=True),
    sa.Column('efir_reference', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['alert_id'], ['alerts.id'], ),
    sa.ForeignKeyConstraint(['assigned_to'], ['authorities.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('incident_number')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('incidents')
    op.drop_table('alerts')
    op.drop_index('idx_locations_coords', table_name='locations')
    op.drop_table('locations')
    op.drop_table('trips')
    op.drop_index('idx_restricted_zones_center', table_name='restricted_zones')
    op.drop_table('restricted_zones')
    op.drop_table('tourists')
    op.drop_table('authorities')
    # ### end Alembic commands ###